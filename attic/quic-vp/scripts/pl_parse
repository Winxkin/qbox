#!/usr/bin/env python3

# Parses and dumps a simple cmake package lock file
# into various formats: json, text,
# and XML manifest format.
# see https://gerrit.googlesource.com/git-repo/+/master/docs/manifest-format.md#repo-manifest-format

import re
import argparse
import json
import time
import sys

def get_packages(filename):
    with open(filename, 'rt') as f:
        package_lock_text = f.read()

    comment_pat = re.compile(r'#.*$', re.MULTILINE)
    package_lock_text = comment_pat.sub('', package_lock_text)

    cpm_pat = re.compile(r'CPMDeclarePackage\((?P<package>\S+)\s+(?P<vars>.*?)\)', re.MULTILINE | re.DOTALL)
    vars_pat = re.compile(r'(?P<name>\S+)\s+(?P<value>\S+)', re.MULTILINE | re.DOTALL)

    for entry in cpm_pat.finditer(package_lock_text):
        g = entry.groupdict()
        cpm_index = {}
        for val_entry in vars_pat.finditer(g['vars']):
            val_g = val_entry.groupdict()
            cpm_index[val_g['name'].lower()] = val_g['value']

        yield g['package'], cpm_index

def dump_manifest(f, packages, info):
    f.write('''<?xml version="1.0" encoding="UTF-8"?>
<!-- dumped on {}, using "{}" -->
<manifest>
  <remote name="origin" fetch="ssh://git@gitlab.qualcomm.com/qqvp/" />
  <remote name="merge-request" fetch="ssh://git@gitlab.qualcomm.com/qqvp/sandboxes/default/" />
  <remote name="clo" fetch="git@git.codelinaro.org:clo/private/qqvp/" />

'''.format(time.ctime(), info))

    # This format is still WIP, will not work as expected:
    for name, params in packages.items():
#       repo = params.get('git_repository', 'FIXME')
        f.write('''  <project path="{}"
           name="{}"/>
'''.format(name, name))

    f.write('''</manifest>
''')

def subst_gs_git(packages, gs_git):
    for name, params in packages.items():
        if 'git_repository' in params:
            params['git_repository'] = params['git_repository'].replace('${GREENSOCS_GIT}', gs_git)

if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.add_argument('-i', '--input', type=str,
        help='path to package-lock cmake file',
        default='package-lock.cmake')
    parser.add_argument("-f", "--format", type=str,
            choices=('json','xml','text'),
            help="output file format",
            default='text')
    parser.add_argument("-o", "--output", type=str,
            help="path to output file",
            default=None)
    parser.add_argument("-g", "--gs-git", type=str,
            help="${GREENSOCS_GIT} val",
            default='ssh://git@gitlab.qualcomm.com/qqvp/')
    args = parser.parse_args()

    packages = dict(get_packages(args.input))
    subst_gs_git(packages, args.gs_git)

    f = open(args.output, 'wt') if args.output else sys.stdout
    if args.format == 'json':
        f.write(json.dumps(packages, indent=4))
    elif args.format == 'text':
        for name, params in packages.items():
            f.write('{}:\n'.format(name))
            for var, val in params.items():
                f.write('\t{}: "{}"\n'.format(var, val))
    elif args.format == 'xml':
        dump_manifest(f, packages, 'tbd')
